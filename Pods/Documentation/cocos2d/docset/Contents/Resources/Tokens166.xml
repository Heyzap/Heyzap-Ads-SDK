<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CCTMXLayer.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CCTMXLayer</TokenIdentifier>
			<Abstract type="html">CCTMXLayer represents the TMX layer.</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>
			
			<NodeRef refid="166"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/setLayerName:</TokenIdentifier>
			<Abstract type="html">name of the layer</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) NSString *layerName</Declaration>
			
			
			<Anchor>//api/name/layerName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTMXLayer/layerName</TokenIdentifier>
			<Abstract type="html">name of the layer</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) NSString *layerName</Declaration>
			
			
			<Anchor>//api/name/layerName</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/setLayerSize:</TokenIdentifier>
			<Abstract type="html">size of the layer in tiles</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) CGSize layerSize</Declaration>
			
			
			<Anchor>//api/name/layerSize</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTMXLayer/layerSize</TokenIdentifier>
			<Abstract type="html">size of the layer in tiles</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) CGSize layerSize</Declaration>
			
			
			<Anchor>//api/name/layerSize</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/setMapTileSize:</TokenIdentifier>
			<Abstract type="html">size of the map&apos;s tile (could be differnt from the tile&apos;s size)</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) CGSize mapTileSize</Declaration>
			
			
			<Anchor>//api/name/mapTileSize</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTMXLayer/mapTileSize</TokenIdentifier>
			<Abstract type="html">size of the map&apos;s tile (could be differnt from the tile&apos;s size)</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) CGSize mapTileSize</Declaration>
			
			
			<Anchor>//api/name/mapTileSize</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/setTiles:</TokenIdentifier>
			<Abstract type="html">pointer to the map of tiles</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) uint32_t *tiles</Declaration>
			
			
			<Anchor>//api/name/tiles</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTMXLayer/tiles</TokenIdentifier>
			<Abstract type="html">pointer to the map of tiles</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) uint32_t *tiles</Declaration>
			
			
			<Anchor>//api/name/tiles</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/setTileset:</TokenIdentifier>
			<Abstract type="html">Tilset information for the layer</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) CCTMXTilesetInfo *tileset</Declaration>
			
			
			<Anchor>//api/name/tileset</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTMXLayer/tileset</TokenIdentifier>
			<Abstract type="html">Tilset information for the layer</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) CCTMXTilesetInfo *tileset</Declaration>
			
			
			<Anchor>//api/name/tileset</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/setLayerOrientation:</TokenIdentifier>
			<Abstract type="html">Layer orientation, which is the same as the map orientation</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) NSUInteger layerOrientation</Declaration>
			
			
			<Anchor>//api/name/layerOrientation</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTMXLayer/layerOrientation</TokenIdentifier>
			<Abstract type="html">Layer orientation, which is the same as the map orientation</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) NSUInteger layerOrientation</Declaration>
			
			
			<Anchor>//api/name/layerOrientation</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/setProperties:</TokenIdentifier>
			<Abstract type="html">properties from the layer. They can be added using Tiled</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) NSMutableArray *properties</Declaration>
			
			
			<Anchor>//api/name/properties</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCTMXLayer/properties</TokenIdentifier>
			<Abstract type="html">properties from the layer. They can be added using Tiled</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, retain) NSMutableArray *properties</Declaration>
			
			
			<Anchor>//api/name/properties</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCTMXLayer/layerWithTilesetInfo:layerInfo:mapInfo:</TokenIdentifier>
			<Abstract type="html">creates a CCTMXLayer with an tileset info, a layer info and a map info</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>+ (id)layerWithTilesetInfo:(CCTMXTilesetInfo *)tilesetInfo layerInfo:(CCTMXLayerInfo *)layerInfo mapInfo:(CCTMXMapInfo *)mapInfo</Declaration>
			
			
			<Anchor>//api/name/layerWithTilesetInfo:layerInfo:mapInfo:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/initWithTilesetInfo:layerInfo:mapInfo:</TokenIdentifier>
			<Abstract type="html">initializes a CCTMXLayer with a tileset info, a layer info and a map info</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>- (id)initWithTilesetInfo:(CCTMXTilesetInfo *)tilesetInfo layerInfo:(CCTMXLayerInfo *)layerInfo mapInfo:(CCTMXMapInfo *)mapInfo</Declaration>
			
			
			<Anchor>//api/name/initWithTilesetInfo:layerInfo:mapInfo:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/releaseMap</TokenIdentifier>
			<Abstract type="html">dealloc the map that contains the tile position from memory.
Unless you want to know at runtime the tiles positions, you can safely call this method.
If you are going to call [layer tileGIDAt:] then, don&apos;t release the map</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>- (void)releaseMap</Declaration>
			
			
			<Anchor>//api/name/releaseMap</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/tileAt:</TokenIdentifier>
			<Abstract type="html">returns the tile (CCSprite) at a given a tile coordinate.
The returned CCSprite will be already added to the CCTMXLayer. Don&apos;t add it again.
The CCSprite can be treated like any other CCSprite: rotated, scaled, translated, opacity, color, etc.
You can remove either by calling:
	- [layer removeChild:sprite cleanup:cleanup];
	- or [layer removeTileAt:ccp(x,y)];</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>- (CCSprite *)tileAt:(CGPoint)tileCoordinate</Declaration>
			
			
			<Anchor>//api/name/tileAt:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/tileGIDAt:</TokenIdentifier>
			<Abstract type="html">returns the tile gid at a given tile coordinate.
if it returns 0, it means that the tile is empty.
This method requires the the tile map has not been previously released (eg. don&apos;t call [layer releaseMap])</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>- (uint32_t)tileGIDAt:(CGPoint)tileCoordinate</Declaration>
			
			
			<Anchor>//api/name/tileGIDAt:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/tileGIDAt:withFlags:</TokenIdentifier>
			<Abstract type="html">returns the tile gid at a given tile coordinate. It also returns the tile flags.
This method requires the the tile map has not been previously released (eg. don&apos;t call [layer releaseMap])</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>- (uint32_t)tileGIDAt:(CGPoint)pos withFlags:(ccTMXTileFlags *)flags</Declaration>
			
			
			<Anchor>//api/name/tileGIDAt:withFlags:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/setTileGID:at:</TokenIdentifier>
			<Abstract type="html">sets the tile gid (gid = tile global id) at a given tile coordinate.
The Tile GID can be obtained by using the method &quot;tileGIDAt&quot; or by using the TMX editor -&gt; Tileset Mgr +1.
If a tile is already placed at that position, then it will be removed.</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>- (void)setTileGID:(uint32_t)gid at:(CGPoint)tileCoordinate</Declaration>
			
			
			<Anchor>//api/name/setTileGID:at:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/setTileGID:at:withFlags:</TokenIdentifier>
			<Abstract type="html">sets the tile gid (gid = tile global id) at a given tile coordinate.
The Tile GID can be obtained by using the method &quot;tileGIDAt&quot; or by using the TMX editor -&gt; Tileset Mgr +1.
If a tile is already placed at that position, then it will be removed.</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>- (void)setTileGID:(uint32_t)gid at:(CGPoint)pos withFlags:(ccTMXTileFlags)flags</Declaration>
			
			
			<Anchor>//api/name/setTileGID:at:withFlags:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/removeTileAt:</TokenIdentifier>
			<Abstract type="html">removes a tile at given tile coordinate</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>- (void)removeTileAt:(CGPoint)tileCoordinate</Declaration>
			
			
			<Anchor>//api/name/removeTileAt:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/positionAt:</TokenIdentifier>
			<Abstract type="html">returns the position in points of a given tile coordinate</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>- (CGPoint)positionAt:(CGPoint)tileCoordinate</Declaration>
			
			
			<Anchor>//api/name/positionAt:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/propertyNamed:</TokenIdentifier>
			<Abstract type="html">return the value for the specific property name</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>- (id)propertyNamed:(NSString *)propertyName</Declaration>
			
			
			<Anchor>//api/name/propertyNamed:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/setupTiles</TokenIdentifier>
			<Abstract type="html">Creates the tiles</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>- (void)setupTiles</Declaration>
			
			
			<Anchor>//api/name/setupTiles</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCTMXLayer/addChild:z:tag:</TokenIdentifier>
			<Abstract type="html">CCTMXLayer doesn&apos;t support adding a CCSprite manually.</Abstract>
			<DeclaredIn>CCTMXLayer.h</DeclaredIn>			
			
			<Declaration>- (void)addChild:(CCNode *)node z:(NSInteger)z tag:(NSInteger)tag</Declaration>
			
			
			<Anchor>//api/name/addChild:z:tag:</Anchor>
		</Token>
		
	</File>
</Tokens>