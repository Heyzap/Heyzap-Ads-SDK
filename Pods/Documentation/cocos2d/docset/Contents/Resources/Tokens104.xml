<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CCMenuItemLabel.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CCMenuItemLabel</TokenIdentifier>
			<Abstract type="html">An abstract class for &quot;label&quot; CCMenuItemLabel items
Any CCNode that supports the CCLabelProtocol protocol can be added.
Supported nodes:
   - CCLabelBMFont
   - CCLabelAtlas
   - CCLabelTTF</Abstract>
			<DeclaredIn>CCMenuItem.h</DeclaredIn>
			
			<NodeRef refid="104"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCMenuItemLabel/setDisabledColor:</TokenIdentifier>
			<Abstract type="html">the color that will be used to disable the item</Abstract>
			<DeclaredIn>CCMenuItem.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) ccColor3B disabledColor</Declaration>
			
			
			<Anchor>//api/name/disabledColor</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCMenuItemLabel/disabledColor</TokenIdentifier>
			<Abstract type="html">the color that will be used to disable the item</Abstract>
			<DeclaredIn>CCMenuItem.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite) ccColor3B disabledColor</Declaration>
			
			
			<Anchor>//api/name/disabledColor</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCMenuItemLabel/setLabel:</TokenIdentifier>
			<Abstract type="html">Label that is rendered. It can be any CCNode that implements the CCLabelProtocol</Abstract>
			<DeclaredIn>CCMenuItem.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) CCNode&lt;CCLabelProtocol,CCRGBAProtocol&gt; *label</Declaration>
			
			
			<Anchor>//api/name/label</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCMenuItemLabel/label</TokenIdentifier>
			<Abstract type="html">Label that is rendered. It can be any CCNode that implements the CCLabelProtocol</Abstract>
			<DeclaredIn>CCMenuItem.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) CCNode&lt;CCLabelProtocol,CCRGBAProtocol&gt; *label</Declaration>
			
			
			<Anchor>//api/name/label</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCMenuItemLabel/itemWithLabel:</TokenIdentifier>
			<Abstract type="html">creates a CCMenuItemLabel with a Label. Block will benil</Abstract>
			<DeclaredIn>CCMenuItem.h</DeclaredIn>			
			
			<Declaration>+ (id)itemWithLabel:(CCNode&lt;CCLabelProtocol,CCRGBAProtocol&gt; *)label</Declaration>
			
			
			<Anchor>//api/name/itemWithLabel:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCMenuItemLabel/itemWithLabel:target:selector:</TokenIdentifier>
			<Abstract type="html">creates a CCMenuItemLabel with a Label, target and selector.
The &quot;target&quot; won&apos;t be retained.</Abstract>
			<DeclaredIn>CCMenuItem.h</DeclaredIn>			
			
			<Declaration>+ (id)itemWithLabel:(CCNode&lt;CCLabelProtocol,CCRGBAProtocol&gt; *)label target:(id)target selector:(SEL)selector</Declaration>
			
			
			<Anchor>//api/name/itemWithLabel:target:selector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCMenuItemLabel/itemWithLabel:block:</TokenIdentifier>
			<Abstract type="html">creates a CCMenuItemLabel with a Label and a block to execute.
The block will be &quot;copied&quot;.</Abstract>
			<DeclaredIn>CCMenuItem.h</DeclaredIn>			
			
			<Declaration>+ (id)itemWithLabel:(CCNode&lt;CCLabelProtocol,CCRGBAProtocol&gt; *)label block:(void ( ^ ) ( id sender ))block</Declaration>
			
			
			<Anchor>//api/name/itemWithLabel:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCMenuItemLabel/initWithLabel:target:selector:</TokenIdentifier>
			<Abstract type="html">initializes a CCMenuItemLabel with a Label, target and selector.
Internally it will create a block that executes the target/selector.
The &quot;target&quot; won&apos;t be retained.</Abstract>
			<DeclaredIn>CCMenuItem.h</DeclaredIn>			
			
			<Declaration>- (id)initWithLabel:(CCNode&lt;CCLabelProtocol,CCRGBAProtocol&gt; *)label target:(id)target selector:(SEL)selector</Declaration>
			
			
			<Anchor>//api/name/initWithLabel:target:selector:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCMenuItemLabel/initWithLabel:block:</TokenIdentifier>
			<Abstract type="html">initializes a CCMenuItemLabel with a Label and a block to execute.
The block will be &quot;copied&quot;.
This is the designated initializer.</Abstract>
			<DeclaredIn>CCMenuItem.h</DeclaredIn>			
			
			<Declaration>- (id)initWithLabel:(CCNode&lt;CCLabelProtocol,CCRGBAProtocol&gt; *)label block:(void ( ^ ) ( id sender ))block</Declaration>
			
			
			<Anchor>//api/name/initWithLabel:block:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCMenuItemLabel/setString:</TokenIdentifier>
			<Abstract type="html">sets a new string to the inner label</Abstract>
			<DeclaredIn>CCMenuItem.h</DeclaredIn>			
			
			<Declaration>- (void)setString:(NSString *)label</Declaration>
			
			
			<Anchor>//api/name/setString:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCMenuItemLabel/setIsEnabled:</TokenIdentifier>
			<Abstract type="html">Enable or disabled the CCMenuItemFont</Abstract>
			<DeclaredIn>CCMenuItem.h</DeclaredIn>			
			
			<Declaration>- (void)setIsEnabled:(BOOL)enabled</Declaration>
			
			
			<Anchor>//api/name/setIsEnabled:</Anchor>
		</Token>
		
	</File>
</Tokens>