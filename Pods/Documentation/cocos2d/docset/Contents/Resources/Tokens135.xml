<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/CCRenderTexture.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/CCRenderTexture</TokenIdentifier>
			<Abstract type="html">CCRenderTexture is a generic rendering target. To render things into it,
simply construct a render target, call begin on it, call visit on any cocos2d
scenes or objects to render them, and call end. For convienience, render texture
adds a sprite as its display child with the results, so you can simply add
the render texture to your scene and treat it like any other CCNode.
There are also functions for saving the render texture to disk in PNG or JPG format.</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>
			
			<NodeRef refid="135"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/setSprite:</TokenIdentifier>
			<Abstract type="html">The CCSprite being used.
The sprite, by default, will use the following blending function: GLONE, GLONEMINUSSRC_ALPHA.
The blending function can be changed in runtime by calling:
	- [[renderTexture sprite] setBlendFunc:(ccBlendFunc){GLONE, GLONEMINUSSRC_ALPHA}];</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) CCSprite *sprite</Declaration>
			
			
			<Anchor>//api/name/sprite</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/CCRenderTexture/sprite</TokenIdentifier>
			<Abstract type="html">The CCSprite being used.
The sprite, by default, will use the following blending function: GLONE, GLONEMINUSSRC_ALPHA.
The blending function can be changed in runtime by calling:
	- [[renderTexture sprite] setBlendFunc:(ccBlendFunc){GLONE, GLONEMINUSSRC_ALPHA}];</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readwrite, assign) CCSprite *sprite</Declaration>
			
			
			<Anchor>//api/name/sprite</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCRenderTexture/renderTextureWithWidth:height:pixelFormat:depthStencilFormat:</TokenIdentifier>
			<Abstract type="html">initializes a RenderTexture object with width and height in Points and a pixel format( only RGB and RGBA formats are valid ) and depthStencil format</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>+ (id)renderTextureWithWidth:(int)w height:(int)h pixelFormat:(CCTexture2DPixelFormat)format depthStencilFormat:(GLuint)depthStencilFormat</Declaration>
			
			
			<Anchor>//api/name/renderTextureWithWidth:height:pixelFormat:depthStencilFormat:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCRenderTexture/renderTextureWithWidth:height:pixelFormat:</TokenIdentifier>
			<Abstract type="html">creates a RenderTexture object with width and height in Points and a pixel format, only RGB and RGBA formats are valid</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>+ (id)renderTextureWithWidth:(int)w height:(int)h pixelFormat:(CCTexture2DPixelFormat)format</Declaration>
			
			
			<Anchor>//api/name/renderTextureWithWidth:height:pixelFormat:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/clm/CCRenderTexture/renderTextureWithWidth:height:</TokenIdentifier>
			<Abstract type="html">creates a RenderTexture object with width and height in Points, pixel format is RGBA8888</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>+ (id)renderTextureWithWidth:(int)w height:(int)h</Declaration>
			
			
			<Anchor>//api/name/renderTextureWithWidth:height:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/initWithWidth:height:pixelFormat:</TokenIdentifier>
			<Abstract type="html">initializes a RenderTexture object with width and height in Points and a pixel format, only RGB and RGBA formats are valid</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>- (id)initWithWidth:(int)w height:(int)h pixelFormat:(CCTexture2DPixelFormat)format</Declaration>
			
			
			<Anchor>//api/name/initWithWidth:height:pixelFormat:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/initWithWidth:height:pixelFormat:depthStencilFormat:</TokenIdentifier>
			<Abstract type="html">initializes a RenderTexture object with width and height in Points and a pixel format( only RGB and RGBA formats are valid ) and depthStencil format</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>- (id)initWithWidth:(int)w height:(int)h pixelFormat:(CCTexture2DPixelFormat)format depthStencilFormat:(GLuint)depthStencilFormat</Declaration>
			
			
			<Anchor>//api/name/initWithWidth:height:pixelFormat:depthStencilFormat:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/begin</TokenIdentifier>
			<Abstract type="html">starts grabbing</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>- (void)begin</Declaration>
			
			
			<Anchor>//api/name/begin</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/beginWithClear:g:b:a:</TokenIdentifier>
			<Abstract type="html">starts rendering to the texture while clearing the texture first.
This is more efficient then calling -clear first and then begin</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>- (void)beginWithClear:(float)r g:(float)g b:(float)b a:(float)a</Declaration>
			
			
			<Anchor>//api/name/beginWithClear:g:b:a:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/beginWithClear:g:b:a:depth:</TokenIdentifier>
			<Abstract type="html">starts rendering to the texture while clearing the texture first.
This is more efficient then calling -clear first and then begin</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>- (void)beginWithClear:(float)r g:(float)g b:(float)b a:(float)a depth:(float)depthValue</Declaration>
			
			
			<Anchor>//api/name/beginWithClear:g:b:a:depth:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/beginWithClear:g:b:a:depth:stencil:</TokenIdentifier>
			<Abstract type="html">starts rendering to the texture while clearing the texture first.
This is more efficient then calling -clear first and then begin</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>- (void)beginWithClear:(float)r g:(float)g b:(float)b a:(float)a depth:(float)depthValue stencil:(int)stencilValue</Declaration>
			
			
			<Anchor>//api/name/beginWithClear:g:b:a:depth:stencil:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/end</TokenIdentifier>
			<Abstract type="html">ends grabbing</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>- (void)end</Declaration>
			
			
			<Anchor>//api/name/end</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/clear:g:b:a:</TokenIdentifier>
			<Abstract type="html">clears the texture with a color</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>- (void)clear:(float)r g:(float)g b:(float)b a:(float)a</Declaration>
			
			
			<Anchor>//api/name/clear:g:b:a:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/clearDepth:</TokenIdentifier>
			<Abstract type="html">clears the texture with a specified depth value</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>- (void)clearDepth:(float)depthValue</Declaration>
			
			
			<Anchor>//api/name/clearDepth:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/clearStencil:</TokenIdentifier>
			<Abstract type="html">clears the texture with a specified stencil value</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>- (void)clearStencil:(int)stencilValue</Declaration>
			
			
			<Anchor>//api/name/clearStencil:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/newCGImage</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>- (CGImageRef)newCGImage</Declaration>
			
			
			<Anchor>//api/name/newCGImage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/saveToFile:</TokenIdentifier>
			<Abstract type="html">saves the texture into a file using JPEG format. The file will be saved in the Documents folder.
Returns YES if the operation is successful.</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>- (BOOL)saveToFile:(NSString *)name</Declaration>
			
			
			<Anchor>//api/name/saveToFile:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/saveToFile:format:</TokenIdentifier>
			<Abstract type="html">saves the texture into a file. The format could be JPG or PNG. The file will be saved in the Documents folder.
  Returns YES if the operation is successful.</Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>- (BOOL)saveToFile:(NSString *)name format:(tCCImageFormat)format</Declaration>
			
			
			<Anchor>//api/name/saveToFile:format:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/getUIImage</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>CCRenderTexture.h</DeclaredIn>			
			
			<Declaration>- (UIImage *)getUIImage</Declaration>
			
			
			<Anchor>//api/name/getUIImage</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/saveBuffer:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ccDeprecated.h</DeclaredIn>			
			
			<Declaration>- (BOOL)saveBuffer:(NSString *)name</Declaration>
			
			
			<Anchor>//api/name/saveBuffer:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/saveBuffer:format:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ccDeprecated.h</DeclaredIn>			
			
			<Declaration>- (BOOL)saveBuffer:(NSString *)name format:(int)format</Declaration>
			
			
			<Anchor>//api/name/saveBuffer:format:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/getUIImageAsDataFromBuffer:</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ccDeprecated.h</DeclaredIn>			
			
			<Declaration>- (NSData *)getUIImageAsDataFromBuffer:(int)format</Declaration>
			
			
			<Anchor>//api/name/getUIImageAsDataFromBuffer:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/CCRenderTexture/getUIImageFromBuffer</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>ccDeprecated.h</DeclaredIn>			
			
			<Declaration>- (UIImage *)getUIImageFromBuffer</Declaration>
			
			
			<Anchor>//api/name/getUIImageFromBuffer</Anchor>
		</Token>
		
	</File>
</Tokens>