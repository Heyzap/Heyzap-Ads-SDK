<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/HZScore.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/HZScore</TokenIdentifier>
			<Abstract type="html">HZScore is the model object for scores on Heyzap Leaderboards. You should use one Leaderboard per concept: a racing game might use one leaderboard per track, ranking based on times. A side scroller might do two leaderboards per level, one for most coins and another for best time.</Abstract>
			<DeclaredIn>HZScore.h</DeclaredIn>
			
			<NodeRef refid="5"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HZScore/initWithLevelID:</TokenIdentifier>
			<Abstract type="html">The initializer for HZScore objects. After creating the score, set the displayScore and relativeScore properties.</Abstract>
			<DeclaredIn>HZScore.h</DeclaredIn>			
			
			<Declaration>- (id)initWithLevelID:(NSString *)levelID</Declaration>
			<Parameters>
				<Parameter>
					<Name>levelID</Name>
					<Abstract type="html">The string representing the level, which you can find at https://developers.heyzap.com/dashboard</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">An HZScore object.</Abstract></ReturnValue>
			<Anchor>//api/name/initWithLevelID:</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HZScore/setDisplayScore:</TokenIdentifier>
			<Abstract type="html">Display Score: The score seen by the user in the game and on the leaderboard
e.g. &quot;25 points&quot;, &quot;15.43 seconds&quot;, &quot;$25&quot;, etc. Required</Abstract>
			<DeclaredIn>HZScore.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *displayScore</Declaration>
			
			
			<Anchor>//api/name/displayScore</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HZScore/displayScore</TokenIdentifier>
			<Abstract type="html">Display Score: The score seen by the user in the game and on the leaderboard
e.g. &quot;25 points&quot;, &quot;15.43 seconds&quot;, &quot;$25&quot;, etc. Required</Abstract>
			<DeclaredIn>HZScore.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *displayScore</Declaration>
			
			
			<Anchor>//api/name/displayScore</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HZScore/setRelativeScore:</TokenIdentifier>
			<Abstract type="html">A number used internally to rank the score against other player scores. A racing game might return the number of seconds the user completed the level in, for example. This value is not user-facing. Required</Abstract>
			<DeclaredIn>HZScore.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) float relativeScore</Declaration>
			
			
			<Anchor>//api/name/relativeScore</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HZScore/relativeScore</TokenIdentifier>
			<Abstract type="html">A number used internally to rank the score against other player scores. A racing game might return the number of seconds the user completed the level in, for example. This value is not user-facing. Required</Abstract>
			<DeclaredIn>HZScore.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic) float relativeScore</Declaration>
			
			
			<Anchor>//api/name/relativeScore</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HZScore/setLevelID:</TokenIdentifier>
			<Abstract type="html">The ID of the level. You can find this value at https://developers.heyzap.com/dashboard Required</Abstract>
			<DeclaredIn>HZScore.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *levelID</Declaration>
			
			
			<Anchor>//api/name/levelID</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HZScore/levelID</TokenIdentifier>
			<Abstract type="html">The ID of the level. You can find this value at https://developers.heyzap.com/dashboard Required</Abstract>
			<DeclaredIn>HZScore.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *levelID</Declaration>
			
			
			<Anchor>//api/name/levelID</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HZScore/setUsername:</TokenIdentifier>
			<Abstract type="html">The username of the player in the game. This property helps Heyzap keep track of the correct scores and correctly match up players. (Optional)</Abstract>
			<DeclaredIn>HZScore.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *username</Declaration>
			
			
			<Anchor>//api/name/username</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HZScore/username</TokenIdentifier>
			<Abstract type="html">The username of the player in the game. This property helps Heyzap keep track of the correct scores and correctly match up players. (Optional)</Abstract>
			<DeclaredIn>HZScore.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, strong) NSString *username</Declaration>
			
			
			<Anchor>//api/name/username</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HZScore/setRank:</TokenIdentifier>
			<Abstract type="html">The user&apos;s rank on the leaderboard. This value is only available when you are getting a score after a network request to Heyzap.</Abstract>
			<DeclaredIn>HZScore.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) int rank</Declaration>
			
			
			<Anchor>//api/name/rank</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/HZScore/rank</TokenIdentifier>
			<Abstract type="html">The user&apos;s rank on the leaderboard. This value is only available when you are getting a score after a network request to Heyzap.</Abstract>
			<DeclaredIn>HZScore.h</DeclaredIn>			
			
			<Declaration>@property (nonatomic, readonly) int rank</Declaration>
			
			
			<Anchor>//api/name/rank</Anchor>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/HZScore/isValid</TokenIdentifier>
			<Abstract type="html">Whether or not the HZScore object has been correctly configured.</Abstract>
			<DeclaredIn>HZScore.h</DeclaredIn>			
			
			<Declaration>- (BOOL)isValid</Declaration>
			
			<ReturnValue><Abstract type="html">YES if valid, otherwise NO.</Abstract></ReturnValue>
			<Anchor>//api/name/isValid</Anchor>
		</Token>
		
	</File>
</Tokens>